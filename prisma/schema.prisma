// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  nom           String
  telephone     String   @unique
  role          Role     @default(STUDENT)
  lastConnected DateTime @updatedAt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  prenom        String
  manager       Manager?
  student       Student?
}

model Filiere {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  nom       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
}

model Niveau {
  id        Int       @id @default(autoincrement())
  nom       String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
}

model Student {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  filiereId Int
  niveauId  Int
  updatedAt DateTime   @updatedAt
  matricule String     @unique
  user      User       @relation(fields: [userId], references: [id])
  filiere   Filiere    @relation(fields: [filiereId], references: [id])
  niveau    Niveau     @relation(fields: [niveauId], references: [id])
  Presence  Presence[]
  Loan      Loan[]
}

model Manager {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  password  String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Author {
  id        Int      @id @default(autoincrement())
  nom       String
  prenom    String
  biography String?
  nbreBooks Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  books     Book[]   @relation("AuthorBooks")
}

model Book {
  id              Int       @id @default(autoincrement())
  title           String
  authorId        Int
  categoryId      Int
  author          Author    @relation("AuthorBooks", fields: [authorId], references: [id])
  category        Category  @relation("BooksCategory", fields: [categoryId], references: [id])
  datePublication DateTime?
  isbn            String?   @unique
  langue          String?
  resume          String?
  genre           String?
  nbPages         Int?
  edition         String?
  imageCover      String?
  disponible      Boolean?  @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Loan            Loan[]
}

model Category {
  id          Int      @id @default(autoincrement())
  nom         String
  description String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  books       Book[]   @relation("BooksCategory")
}

model QRCode {
  id          Int        @id @default(autoincrement())
  code        String     @unique
  image       String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Presence {
  id        Int      @id @default(autoincrement())
  studentId Int?
  date      DateTime @default(now())
  student   Student? @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
}

model Loan {
  id           Int       @id @default(autoincrement())
  bookId       Int
  studentId    Int
  dateBorrowed DateTime
  dateDue      DateTime
  dateReturned DateTime?
  remarks     String?
  book         Book      @relation(fields: [bookId], references: [id])
  student      Student   @relation(fields: [studentId], references: [id])
}

enum Role {
  STUDENT
  MANAGER
}
